; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "HowdyCoder"
#define MyAppVersion "1.0"
#define MyAppPublisher "HowdyCoder, Inc."
#define MyAppURL "https://www.howdycoder.io/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{3A7899B2-B245-4552-986B-2D1A995DB3FC}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputBaseFilename=installer
Compression=lzma
SolidCompression=yes
WizardStyle=modern
OutputDir=installer_output
InfoBeforeFile=internet_readme.txt

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Icons]
Name: "{group}\Howdy Coder"; Filename: "powershell.exe"; IconFilename: "{app}\howdyCoder\ui\res\icon.ico"; WorkingDir: "{app}"; Parameters: "-ExecutionPolicy Bypass -WindowStyle hidden -File ""{app}\start.ps1""";

[Files]
Source: "..\main.py"; DestDir: "{app}"; BeforeInstall: SetProgressMax(10)
Source: "..\requirements.txt"; DestDir: "{app}"
Source: "..\howdyCoder\*"; DestDir: "{app}\howdyCoder"; Excludes: "*\__pycache__\*, \__pycache__\*, *.ui"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "setup_script*.ps1"; DestDir: "{tmp}"
Source: "start.ps1"; DestDir: "{app}"
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[UninstallDelete]
Type: filesandordirs; Name: "{app}\__pycache__"
Type: filesandordirs; Name: "*.pyc"
Type: filesandordirs; Name: "{app}\howdyCoder"
Type: filesandordirs; Name: "{app}\env"
Type: filesandordirs; Name: "{app}\python-*"
Type: files; Name: "{app}\get-pip.py"

[Run]
; These could all be run as one script, but they're separated so that we can update the progress bar and status along the way
Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{tmp}\setup_script1.ps1"""; WorkingDir: {app}; Flags: runhidden; BeforeInstall: UpdateProgressAndSetStatus(30, 'Downloading embedded python pacakge');
Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{tmp}\setup_script2.ps1"""; WorkingDir: {app}; Flags: runhidden; BeforeInstall: UpdateProgressAndSetStatus(60, 'Setting up pip and python virtual environment');
Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{tmp}\setup_script3.ps1"""; WorkingDir: {app}; Flags: runhidden; BeforeInstall: UpdateProgressAndSetStatus(80, 'Installing python packages'); AfterInstall: UpdateProgress(100);


[Code]
procedure SetProgressMax(Ratio: Integer);
begin
  WizardForm.ProgressGauge.Max := WizardForm.ProgressGauge.Max * Ratio;
end;

procedure UpdateProgress(Position: Integer);
begin
  WizardForm.ProgressGauge.Position :=
    Position * WizardForm.ProgressGauge.Max div 100;
end;

procedure SetStatus(Status: String);
begin
  WizardForm.StatusLabel.Caption := Status;
end;

procedure UpdateProgressAndSetStatus(Position: Integer; Status: String);
begin
  SetStatus(Status);
  UpdateProgress(Position);
end;

